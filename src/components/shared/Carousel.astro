---
import type { TCarouselItem } from "./CarouselItem.astro";
import CarouselItem from "./CarouselItem.astro";
export interface Props {
  items: TCarouselItem[];
}

const { items } = Astro.props;
---

<div class="carouselContainer">
  <div class="carousel">
    {items.map((item, index) => <CarouselItem {...item} index={index} />)}
  </div>
  <nav>
    <div class="prev">◄</div>
    <div class="next">►</div>
  </nav>
</div>

<script>
  const $ = (selector: string) => document.querySelector(selector);
  const $$ = (selector: string) => document.querySelectorAll(selector);

  const $carousel = $(".carousel");
  const $$slides = Array.from($$(".carouselItem"));
  let currentRotation = 0;
  let currentIndex = 0;

  $(".next")?.addEventListener("click", () => {
    rotate("left");
  });

  $(".prev")?.addEventListener("click", () => {
    rotate("right");
  });

  const setAsVisible = (element: Element | undefined) => {
    if (!element) return;
    element.setAttribute("data-active", "true");
  };

  const setAsInvisible = (element: Element | undefined) => {
    if (!element) return;
    element.removeAttribute("data-active");
  };

  function rotate(dir: "right" | "left") {
    if (dir === "left") {
      currentRotation -= 60;
      currentIndex++;

      const $prevSlide = $$slides.at((currentIndex - 1) % $$slides.length);
      setAsInvisible($prevSlide);
    }

    if (dir === "right") {
      currentRotation += 60;
      currentIndex--;

      const $nextSlide = $$slides.at((currentIndex + 1) % $$slides.length);
      setAsInvisible($nextSlide);
    }

    const $currentSlide = $$slides.at(currentIndex % $$slides.length);
    setAsVisible($currentSlide);

    // @ts-ignore
    $carousel.style.transform = "rotateY(" + currentRotation + "deg)";
  }
</script>

<style>
  * {
    -webkit-transform-origin: 50% 51%;
    zoom: 1.005;
    will-change: transform;
  }

  .carouselContainer {
    margin: 12rem auto 2rem;

    width: 400px;
    height: 40vh;
    position: relative;
    perspective: 1000px;
  }

  .carousel {
    width: 400px;
    position: absolute;
    transform-style: preserve-3d;
    transition: transform 1s;

    background-color: #ff0000;
  }

  nav {
    position: absolute;
    top: 50%;
    left: -60%;
    right: -60%;

    display: flex;
    justify-content: space-between;
    gap: 1rem;
  }

  @media screen and (max-width: 1000px) {
    .carouselContainer {
      width: 50vw;
      height: 30vh;
      margin: 20vw auto 30vw;
    }

    .carousel {
      width: 50vw;
    }

    nav {
      left: -40%;
      right: -40%;
    }
  }

  @media screen and (max-width: 552px) {
    .carouselContainer {
      margin: 15vw auto 0;
    }
  }

  .next,
  .prev {
    color: #444;
    top: 100px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    background: var(--complement-color);
    border-radius: 5px;
    border-top: 1px solid #fff;
    box-shadow: 0 5px 0 #999;
    transition: box-shadow 0.1s, top 0.1s;
  }

  .next:hover,
  .prev:hover {
    color: #000;
  }

  .next:active,
  .prev:active {
    box-shadow: 0 1px 0 #999;
  }
</style>
